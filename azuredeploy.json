{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "containerTag": {
            "type": "int",
            "metadata": {
                "description": "Tag of Spryker Demoshop Image"
            }
        },
        "postgresqllogin": {
            "type": "string",
            "metadata": {
                "description": "admin login name for postgresql db"
            }
        },
        "postgresqlpwd": {
            "type": "securestring",
            "metadata": {
                "description": "admin password of postgresql db"
            }
        },
        "instanceCount": {
            "type": "int",
            "metadata": {
                "description": "Number of VM instances (200 or less)."
            },
            "defaultValue": 5,
            "maxValue": 200
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username on all VMs."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password for all VMs."
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master",
            "metadata": {
                "description": "Change this value to your repo name if deploying from a fork"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation"
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "nameprefix": "[uniquestring(concat(resourceGroup().id, subscription().id))]",
        "siteNameZed": "[concat(variables('nameprefix'), 'zed')]",
        "siteNameYves": "[concat(variables('nameprefix'), 'yves')]",
        "servicePlanName": "[concat(variables('nameprefix'), 'asp')]",
        "fullContainerName": "[concat('spryker/demoshop:', parameters('containerTag'))]",
        "autoscaleName": "[concat(variables('nameprefix'), 'autoscale')]",
        "storageName": "[concat(variables('nameprefix'), 'sa')]",
        "redisName": "[concat(variables('nameprefix'), 'redis')]",
        "postgresqlName": "[concat(variables('nameprefix'), 'db')]",
        "postgresqlLogin": "[parameters('postgresqllogin')]",
        "postgresqlPwd": "[parameters('postgresqlpwd')]",
        "storageAccountType": "Premium_LRS",
        "addressPrefix": "10.0.0.0/16",
        "subnetPrefix": "10.0.0.0/24",
        "namingInfix": "[concat(variables('nameprefix'), 'vmss')]",
        "domainNameLabel": "[variables('namingInfix')]",
        "virtualNetworkName": "[concat(variables('namingInfix'), '-vnet')]",
        "publicIpAddressName": "[concat(variables('namingInfix'), '-pip')]",
        "publicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]",
        "loadBalancerName": "[concat(variables('namingInfix'), '-lb')]",
        "loadBalancerId": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "backendPoolName": "[concat(variables('namingInfix'), '-bepool')]",
        "nicName": "[concat(variables('namingInfix'), '-nic')]",
        "masterName": "[concat(variables('namingInfix'), '-master')]",
        "availabilitySetName": "[concat(variables('namingInfix'), '-master-set')]",
        "nsgName": "[concat(variables('namingInfix'), '-master-nsg')]",
        "ipConfigName": "[concat(variables('namingInfix'), '-ipconfig')]",
        "frontendIpConfigId": "[concat(variables('loadBalancerId'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "loadBalancerPoolId": "[concat(variables('loadBalancerId'),'/backendAddressPools/', variables('backendPoolName'))]",
        "loadBalancerProbeId": "[concat(variables('loadBalancerId'),'/probes/tcpProbe')]",
        "sshProbeId": "[concat(variables('loadBalancerId'),'/probes/sshProbe')]",
        "subnetName": "[concat(variables('namingInfix'), '-subnet')]",
        "masterSize": "Standard_DS3_v2",
        "vmSku": "Standard_DS4_v2",
        "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
        },
        "clusterName": "es-azure",
        "elasticSetupScriptUrl": "[concat(parameters('_artifactsLocation'), '/elasticsearch-vmss/install-elasticsearch.sh', parameters('_artifactsLocationSasToken'))]",
        "diskSetupScriptUrl": "[concat(parameters('_artifactsLocation'), '/shared_scripts/ubuntu/vm-disk-utils-0.1.sh', parameters('_artifactsLocationSasToken'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Insights/autoscalesettings",
            "name": "autoscale",
            "apiVersion": "2014-04-01",
            "location": "West Europe",
            "tags": {},
            "properties": {
                "profiles": [
                    {
                        "name": "CPU Scale",
                        "capacity": {
                            "minimum": "1",
                            "maximum": "10",
                            "default": "1"
                        },
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "CpuPercentage",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT5M",
                                    "timeAggregation": "Average",
                                    "operator": "GreaterThan",
                                    "threshold": 70
                                },
                                "scaleAction": {
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1",
                                    "cooldown": "PT5M"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "CpuPercentage",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT5M",
                                    "timeAggregation": "Average",
                                    "operator": "GreaterThan",
                                    "threshold": 40
                                },
                                "scaleAction": {
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1",
                                    "cooldown": "PT5M"
                                }
                            }
                        ]
                    }
                ],
                "enabled": true,
                "name": "[variables('autoscaleName')]",
                "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('servicePlanName')]",
            "apiVersion": "2016-03-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "S1",
                "capacity": 1
            },
            "kind": "linux",
            "properties": {
                "workerSizeId": 0,
                "reserved": true,
                "hostingEnvironment": ""
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "name": "[variables('siteNameYves')]",
            "apiVersion": "2016-03-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('siteNameYves')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            ],
            "resources": [
                {
                    "name": "appsettings",
                    "type": "config",
                    "apiVersion": "2016-03-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('siteNameYves'))]"
                    ],
                    "tags": {
                        "displayName": "appSettings"
                    },
                    "properties": {
                        "DOCKER_CUSTOM_IMAGE_NAME": "[variables('fullContainerName')]",
                        "PORT": "8080",
                        "APPLICATION_ENV": "dockertest",
                        "APPLICATION_STORE": "DE",
                        "POSTGRES_HOST": "[concat(variables('postgresqlName'), '.postgres.database.azure.com')]",
                        "POSTGRES_PORT": "5432",
                        "POSTGRES_USER": "[variables('postgresqlLogin')]",
                        "POSTGRES_PASSWORD": "[variables('postgresqlPwd')]",
                        "POSTGRES_DATABASE": "DE_dockertest_zed",
                        "ELASTICSEARCH_HOST": "[reference(variables('publicIpAddressName')).ipAddress]",
                        "ELASTICSEARCH_PORT": "9200",
                        "REDIS_HOST": "[reference(variables('redisName')).hostName]",
                        "REDIS_PASSWORD": "[listKeys(variables('redisName'), '2016-04-01').keys[0].value]",
                        "ZED_HOST": "[concat(variables('siteNameZed'), '.azurewebsites.net')]",
                        "ZED_PROTOCOL": "http"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "name": "[variables('siteNameZed')]",
            "apiVersion": "2016-03-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('siteNameZed')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            ],
            "resources": [
                {
                    "name": "appsettings",
                    "type": "config",
                    "apiVersion": "2016-03-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('siteNameZed'))]"
                    ],
                    "tags": {
                        "displayName": "appSettings"
                    },
                    "properties": {
                        "DOCKER_CUSTOM_IMAGE_NAME": "[variables('fullContainerName')]",
                        "PORT": "8081",
                        "APPLICATION_ENV": "dockertest",
                        "APPLICATION_STORE": "DE",
                        "POSTGRES_HOST": "[concat(variables('postgresqlName'), '.postgres.database.azure.com')]",
                        "POSTGRES_PORT": "5432",
                        "POSTGRES_USER": "[variables('postgresqlLogin')]",
                        "POSTGRES_PASSWORD": "[variables('postgresqlPwd')]",
                        "POSTGRES_DATABASE": "DE_dockertest_zed",
                        "ELASTICSEARCH_HOST": "[reference(variables('publicIpAddressName')).ipAddress]",
                        "ELASTICSEARCH_PORT": "9200",
                        "REDIS_HOST": "[reference(variables('redisName')).hostName]",
                        "REDIS_PASSWORD": "[listKeys(variables('redisName'), '2016-04-01').keys[0].value]",
                        "YVES_HOST": "[concat(variables('siteNameYves'), '.azurewebsites.net')]",
                        "YVES_PROTOCOL": "http"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Cache/Redis",
            "name": "[variables('redisName')]",
            "apiVersion": "2016-04-01",
            "location": "[resourceGroup().location]",
            "tags": {},
            "properties": {
                "redisVersion": "3.2.7",
                "sku": {
                    "name": "Standard",
                    "family": "C",
                    "capacity": 1
                },
                "enableNonSslPort": true
            }
        },
        {
            "apiVersion": "2016-02-01-privatepreview",
            "kind": "",
            "location": "[resourceGroup().location]",
            "name": "[variables('postgresqlname')]",
            "properties": {
                "version": "9.6",
                "administratorLogin": "[variables('postgresqlLogin')]",
                "administratorLoginPassword": "[variables('postgresqlPwd')]",
                "storageMB": "51200"
            },
            "sku": {
                "name": "PGSQLB100",
                "tier": "Basic",
                "capacity": "100",
                "size": "51200",
                "family": "SkuFamily"
            },
            "type": "Microsoft.DBforPostgreSQL/servers"
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allows inbound ssh traffic",
                            "protocol": "Tcp",
                            "sourcePortRange": "22",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Elasticsearch",
                        "properties": {
                            "description": "Allows inbound HTTP traffic from anyone",
                            "protocol": "Tcp",
                            "sourcePortRange": "5601",
                            "destinationPortRange": "5601",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-03-30",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIpAddressName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-03-30",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('domainNameLabel')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadBalancerName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-03-30",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIpAddressId')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('backendPoolName')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontendIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('loadBalancerPoolId')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 5601,
                            "backendPort": 5601,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('loadBalancerProbeId')]"
                            }
                        }
                    },
                    {
                        "name": "ssh",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontendIpConfigId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('loadBalancerPoolId')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('sshProbeId')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 9200,
                            "intervalInSeconds": 30,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "sshProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 30,
                            "numberOfProbes": 2
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2016-04-30-preview",
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 3,
                "platformFaultDomainCount": 3,
                "managed": true
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            ],
            "copy": {
                "name": "masterNodesNicLoop",
                "count": 3
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfigmaster",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.0.1', copyindex())]",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName')), '/subnets/', variables('subnetName'))]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('backendPoolName'))]"
                                }
                            ],
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2016-04-30-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('masterName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "masterVmLoop",
                "count": 3
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterSize')]"
                },
                "osProfile": {
                    "computerName": "[concat('master-vm', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "[variables('storageAccountType')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), copyindex()))]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('masterName'), copyindex(), '/installelasticsearch')]",
                    "apiVersion": "2016-04-30-preview",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('masterName'), copyindex())]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[variables('elasticSetupScriptUrl')]",
                                "[variables('diskSetupScriptUrl')]"
                            ],
                            "commandToExecute": "[concat('bash install-elasticsearch.sh -m -n ', variables('clusterName'))]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('namingInfix')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2016-04-30-preview",
            "dependsOn": [
                "masterVmLoop",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "sku": {
                "name": "[variables('vmSku')]",
                "tier": "Standard",
                "capacity": "[parameters('instanceCount')]"
            },
            "properties": {
                "largeScaleEnabled": "true",
                "overprovision": "true",
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "FromImage"
                        },
                        "imageReference": "[variables('imageReference')]",
                        "dataDisks": [
                            {
                                "lun": "0",
                                "createOption": "Empty",
                                "diskSizeGB": "128",
                                "caching": "ReadWrite",
                                "managedDisk": {
                                    "storageAccountType": "[variables('storageAccountType')]"
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "computerNamePrefix": "[variables('namingInfix')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[variables('nicName')]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[variables('ipConfigName')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName')), '/subnets/', variables('subnetName'))]"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "elasticsearch",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "fileUris": [
                                            "[variables('elasticSetupScriptUrl')]"
                                        ],
                                        "commandToExecute": "[concat('bash install-elasticsearch.sh -n ', variables('clusterName'))]"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        }
    ]
}